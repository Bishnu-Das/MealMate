-- Create PostGIS extension
CREATE EXTENSION IF NOT EXISTS postgis;

-- USERS
CREATE TABLE users (
  user_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  email VARCHAR(100) UNIQUE NOT NULL,
  password VARCHAR(255) NOT NULL,
  phone_number VARCHAR(15),
  role_id VARCHAR(100) NOT NULL
);

-- RESTAURANTS
CREATE TABLE restaurants (
  restaurant_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name VARCHAR(100) NOT NULL,
  password VARCHAR(255) NOT NULL,
  phone VARCHAR(15),
  email VARCHAR(100),
  location_id INT,
  average_rating DECIMAL(3,2) DEFAULT 0.0,
  image_url VARCHAR(255)
);

-- LOCATIONS (create after restaurants to avoid circular reference)
CREATE TABLE user_locations (
  location_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
  restaurant_id INT REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
  street VARCHAR(255),
  city VARCHAR(100),
  postal_code VARCHAR(10),
  latitude DECIMAL(10,8),
  longitude DECIMAL(11,8),
  addr_link VARCHAR(250),
  is_primary BOOLEAN
);

-- Now safely add the FK to restaurants
ALTER TABLE restaurants ADD CONSTRAINT fk_location_id FOREIGN KEY (location_id) REFERENCES user_locations(location_id);

-- RIDER PROFILES
CREATE TABLE rider_profiles (
  user_id INT PRIMARY KEY REFERENCES users(user_id) ON DELETE CASCADE,
  vehicle_type VARCHAR(50),
  current_location VARCHAR(250),
  is_available BOOLEAN DEFAULT true
);

-- ENUMS
CREATE TYPE weekday AS ENUM ('Sun','Mon','Tue','Wed','Thu','Fri','Sat');
CREATE TYPE cart_status AS ENUM ('active', 'abandoned', 'completed');
CREATE TYPE order_status AS ENUM ('pending', 'preparing', 'out_for_delivery', 'delivered', 'cancelled');
CREATE TYPE payment_method AS ENUM ('cod', 'bkash', 'nagad');
CREATE TYPE delivery_status AS ENUM ('pending','in_transit','delivered');
CREATE TYPE notification_target AS ENUM ('user','rider','restaurant');
CREATE TYPE notification_type AS ENUM ('order_update','promotion','delivery_status');
CREATE TYPE chat_type AS ENUM ('order','support');
CREATE TYPE participant_role AS ENUM ('customer','rider','restaurant');
CREATE TYPE message_status AS ENUM ('sent','delivered','read');

-- RESTAURANT HOURS
CREATE TABLE restaurant_hours (
  restaurant_id INT REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
  day_of_week weekday,
  open_time TIME,
  close_time TIME,
  PRIMARY KEY (restaurant_id, day_of_week)
);

-- MENU
CREATE TABLE menu_categories (
  category_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  restaurant_id INT REFERENCES restaurants(restaurant_id) ON DELETE CASCADE,
  name VARCHAR(100),
  menu_category_image_url VARCHAR(250)
);

CREATE TABLE menu_items (
  menu_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  category_id INT REFERENCES menu_categories(category_id),
  name VARCHAR(100),
  description TEXT,
  price DECIMAL(10,2) NOT NULL,
  discount DECIMAL(10,2),
  is_available BOOLEAN DEFAULT true,
  menu_item_image_url VARCHAR(255)
);

-- CARTS
CREATE TABLE carts (
  cart_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(user_id) ON DELETE CASCADE,
  status cart_status
);

CREATE TABLE cart_item (
  cart_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cart_id INT REFERENCES carts(cart_id) ON DELETE CASCADE,
  menu_item_id INT REFERENCES menu_items(menu_item_id),
  restaurant_id INT REFERENCES restaurants(restaurant_id),
  quantity INT CHECK (quantity > 0)
);

-- ORDERS
CREATE TABLE orders (
  order_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(user_id),
  restaurant_id INT REFERENCES restaurants(restaurant_id),
  rider_id INT REFERENCES users(user_id),
  status order_status,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  updated_at TIMESTAMP,
  delivered_at TIMESTAMP,
  total_amount DECIMAL(10,2),
  cart_id INT REFERENCES carts(cart_id)
);

CREATE TABLE order_items (
  order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
  menu_item_id INT REFERENCES menu_items(menu_item_id),
  quantity INT CHECK (quantity > 0),
  price DECIMAL(10,2) NOT NULL,
  PRIMARY KEY (order_id, menu_item_id)
);

-- PAYMENTS
CREATE TABLE payments (
  payment_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT UNIQUE REFERENCES orders(order_id) ON DELETE CASCADE,
  user_id INT REFERENCES users(user_id),
  method_type payment_method,
  amount DECIMAL(10,2),
  status VARCHAR(20),
  paid_at TIMESTAMP
);

-- DELIVERIES
CREATE TABLE deliveries (
  delivery_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
  rider_id INT REFERENCES users(user_id),
  restaurant_id INT REFERENCES restaurants(restaurant_id),
  dropoff_latitude DECIMAL(10,8),
  dropoff_longitude DECIMAL(11,8),
  dropoff_addr VARCHAR(250),
  status delivery_status,
  start_time TIMESTAMP,
  end_time TIMESTAMP
);

-- REVIEWS
CREATE TABLE reviews (
  review_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(user_id),
  restaurant_id INT REFERENCES restaurants(restaurant_id),
  rider_id INT REFERENCES rider_profiles(user_id),
  rating DECIMAL(2,1) CHECK (rating >= 1.0 AND rating <= 5.0),
  comment TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- NOTIFICATIONS
CREATE TABLE notifications (
  notification_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id INT REFERENCES users(user_id),
  target_type notification_target NOT NULL,
  target_id INT NOT NULL,
  order_id INT REFERENCES orders(order_id),
  type notification_type,
  message TEXT,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  is_read BOOLEAN DEFAULT false
);

-- CHATS
CREATE TABLE chats (
  chat_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT REFERENCES orders(order_id) ON DELETE CASCADE,
  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  closed_at TIMESTAMP,
  status VARCHAR(20),
  chat_type chat_type
);

CREATE TABLE chat_participants (
  chat_id INT REFERENCES chats(chat_id) ON DELETE CASCADE,
  user_id INT REFERENCES users(user_id),
  role participant_role,
  PRIMARY KEY (chat_id, user_id)
);

CREATE TABLE chat_messages (
  message_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  chat_id INT REFERENCES chats(chat_id) ON DELETE CASCADE,
  sender_id INT REFERENCES users(user_id),
  message TEXT,
  sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
  status message_status DEFAULT 'sent'
);

-- FUNCTION to upsert restaurant hours
CREATE OR REPLACE FUNCTION upsert_restaurant_hours(
    p_restaurant_id INT,
    p_hours JSONB
)
RETURNS VOID AS
$$
DECLARE
    hour_obj JSONB;
    new_days weekday[];
    mapped_day weekday;
BEGIN
    SELECT ARRAY_AGG(
        CASE elem->>'day_of_week'
            WHEN 'sunday' THEN 'Sun'
            WHEN 'monday' THEN 'Mon'
            WHEN 'tuesday' THEN 'Tue'
            WHEN 'wednesday' THEN 'Wed'
            WHEN 'thursday' THEN 'Thu'
            WHEN 'friday' THEN 'Fri'
            WHEN 'saturday' THEN 'Sat'
        END::weekday
    )
    INTO new_days
    FROM JSONB_ARRAY_ELEMENTS(p_hours) AS elem;

    FOR hour_obj IN SELECT * FROM JSONB_ARRAY_ELEMENTS(p_hours)
    LOOP
        SELECT 
            CASE hour_obj->>'day_of_week'
                WHEN 'sunday' THEN 'Sun'
                WHEN 'monday' THEN 'Mon'
                WHEN 'tuesday' THEN 'Tue'
                WHEN 'wednesday' THEN 'Wed'
                WHEN 'thursday' THEN 'Thu'
                WHEN 'friday' THEN 'Fri'
                WHEN 'saturday' THEN 'Sat'
            END::weekday
        INTO mapped_day;

        INSERT INTO restaurant_hours (restaurant_id, day_of_week, open_time, close_time)
        VALUES (
            p_restaurant_id,
            mapped_day,
            (hour_obj->>'open_time')::TIME,
            (hour_obj->>'close_time')::TIME
        )
        ON CONFLICT (restaurant_id, day_of_week)
        DO UPDATE SET
            open_time = EXCLUDED.open_time,
            close_time = EXCLUDED.close_time;
    END LOOP;

    DELETE FROM restaurant_hours
    WHERE restaurant_id = p_restaurant_id
      AND day_of_week <> ALL(new_days);
END;
$$
LANGUAGE plpgsql;








-- -- === ENUM TYPES ===
-- CREATE TYPE day_of_week_enum AS ENUM ('Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat');
-- CREATE TYPE order_status_enum AS ENUM ('pending', 'preparing', 'out_for_delivery', 'delivered', 'cancelled');
-- CREATE TYPE payment_method_enum AS ENUM ('card', 'paypal', 'bkash', 'rocket');
-- CREATE TYPE notification_target_enum AS ENUM ('user', 'rider', 'restaurant');
-- CREATE TYPE notification_type_enum AS ENUM ('order_update', 'promotion', 'delivery_status');
-- CREATE TYPE chat_type_enum AS ENUM ('order', 'support');
-- CREATE TYPE chat_role_enum AS ENUM ('customer', 'rider', 'restaurant');
-- CREATE TYPE message_status_enum AS ENUM ('sent', 'delivered', 'read');
-- CREATE TYPE cart_status_enum AS ENUM ('active', 'abandoned', 'completed');

-- CREATE EXTENSION IF NOT EXISTS postgis;


-- -- === USERS ===
-- CREATE TABLE users (
--   user_id SERIAL PRIMARY KEY,
--   name VARCHAR(100) NOT NULL,
--   email VARCHAR(100) UNIQUE NOT NULL,
--   password VARCHAR(255) NOT NULL,
--   phone_number VARCHAR(15),
--   role_id VARCHAR(100) NOT NULL
-- );
-- CREATE INDEX idx_users_email ON users(emai l);

-- -- === RIDERS ===
-- CREATE TABLE rider_profiles (
--   user_id INT PRIMARY KEY REFERENCES users(user_id),
--   vehicle_type VARCHAR(50),
--   current_location VARCHAR(250),
--   is_available BOOLEAN DEFAULT TRUE
-- );

-- -- === LOCATIONS ===
-- CREATE TABLE user_locations (
--   location_id SERIAL PRIMARY KEY,
--   user_id INT REFERENCES users(user_id),
--   street VARCHAR(255),
--   city VARCHAR(100),
--   postal_code VARCHAR(10),
--   addr_link VARCHAR(250),
--   is_primary BOOLEAN
-- );
-- CREATE INDEX idx_user_locations_user_id ON user_locations(user_id);

-- -- === RESTAURANTS ===
-- CREATE TABLE restaurants (
--   restaurant_id SERIAL PRIMARY KEY,
--   name VARCHAR(100) NOT NULL,
--   phone VARCHAR(15),
--   email VARCHAR(100),
--   password VARCHAR(255) NOT NULL,
--   location_id INT REFERENCES user_locations(location_id),
--   average_rating DECIMAL(3,2) DEFAULT 0.0
-- );
-- CREATE INDEX idx_restaurants_location_id ON restaurants(location_id);

-- CREATE TABLE restaurant_hours (
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   day_of_week day_of_week_enum,
--   open_time TIME,
--   close_time TIME,
--   PRIMARY KEY (restaurant_id, day_of_week)
-- );

-- -- === MENU ===
-- CREATE TABLE menu_categories (
--   category_id SERIAL PRIMARY KEY,
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   name VARCHAR(100)
-- );
-- CREATE INDEX idx_menu_categories_restaurant_id ON menu_categories(restaurant_id);

-- CREATE TABLE menu_items (
--   menu_item_id SERIAL PRIMARY KEY,
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   category_id INT REFERENCES menu_categories(category_id),
--   name VARCHAR(100),
--   description TEXT,
--   price DECIMAL(10,2) NOT NULL,
--   is_available BOOLEAN DEFAULT TRUE
-- );
-- CREATE INDEX idx_menu_items_restaurant_id ON menu_items(restaurant_id);

-- -- === CARTS ===
-- CREATE TABLE carts (
--   cart_id SERIAL PRIMARY KEY,
--   user_id INT REFERENCES users(user_id),
--   status cart_status_enum
-- );
-- CREATE INDEX idx_carts_user_id ON carts(user_id);

-- CREATE TABLE cart_item (
--   cart_item_id SERIAL PRIMARY KEY,
--   cart_id INT REFERENCES carts(cart_id),
--   menu_item_id INT REFERENCES menu_items(menu_item_id),
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   quantity INT CHECK (quantity > 0)
-- );
-- CREATE INDEX idx_cart_item_cart_menu ON cart_item(cart_id, menu_item_id);

-- -- === ORDERS ===
-- CREATE TABLE orders (
--   order_id SERIAL PRIMARY KEY,
--   user_id INT REFERENCES users(user_id),
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   rider_id INT REFERENCES users(user_id),
--   status order_status_enum,
--   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   updated_at TIMESTAMP,
--   delivered_at TIMESTAMP,
--   total_amount DECIMAL(10,2)
-- );
-- CREATE INDEX idx_orders_user_restaurant_status ON orders(user_id, restaurant_id, status);

-- CREATE TABLE order_items (
--   order_id INT REFERENCES orders(order_id),
--   menu_item_id INT REFERENCES menu_items(menu_item_id),
--   quantity INT CHECK (quantity > 0),
--   price DECIMAL(10,2) NOT NULL,
--   PRIMARY KEY (order_id, menu_item_id)
-- );

-- -- === PAYMENTS ===
-- CREATE TABLE payments (
--   payment_id SERIAL PRIMARY KEY,
--   order_id INT UNIQUE REFERENCES orders(order_id),
--   user_id INT REFERENCES users(user_id),
--   method_type payment_method_enum,
--   amount DECIMAL(10,2),
--   status VARCHAR(20),
--   paid_at TIMESTAMP
-- );
-- CREATE INDEX idx_payments_order_user ON payments(order_id, user_id);

-- -- === DELIVERIES ===
-- CREATE TABLE deliveries (
--   delivery_id SERIAL PRIMARY KEY,
--   order_id INT REFERENCES orders(order_id),
--   rider_id INT REFERENCES users(user_id),
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   dropoff_latitude DECIMAL(10,8),
--   dropoff_longitude DECIMAL(11,8),
--   dropoff_addr VARCHAR(250),
--   status order_status_enum,
--   start_time TIMESTAMP,
--   end_time TIMESTAMP
-- );
-- CREATE INDEX idx_deliveries_order_rider ON deliveries(order_id, rider_id);

-- -- === REVIEWS ===
-- CREATE TABLE reviews (
--   review_id SERIAL PRIMARY KEY,
--   user_id INT REFERENCES users(user_id),
--   restaurant_id INT REFERENCES restaurants(restaurant_id),
--   rider_id INT REFERENCES rider_profiles(user_id),
--   rating DECIMAL(2,1) CHECK (rating BETWEEN 1.0 AND 5.0),
--   comment TEXT,
--   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
-- );
-- CREATE INDEX idx_reviews_user ON reviews(user_id);

-- -- === NOTIFICATIONS ===
-- CREATE TABLE notifications (
--   notification_id SERIAL PRIMARY KEY,
--   user_id INT REFERENCES users(user_id),
--   target_type notification_target_enum NOT NULL,
--   target_id INT NOT NULL,
--   order_id INT REFERENCES orders(order_id),
--   type notification_type_enum,
--   message TEXT,
--   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   is_read BOOLEAN DEFAULT FALSE
-- );

-- -- === CHATS ===
-- CREATE TABLE chats (
--   chat_id SERIAL PRIMARY KEY,
--   order_id INT REFERENCES orders(order_id),
--   created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   closed_at TIMESTAMP,
--   status VARCHAR(20),
--   chat_type chat_type_enum
-- );
-- CREATE INDEX idx_chats_order_id ON chats(order_id);

-- CREATE TABLE chat_participants (
--   chat_id INT REFERENCES chats(chat_id),
--   user_id INT REFERENCES users(user_id),
--   role chat_role_enum,
--   PRIMARY KEY (chat_id, user_id)
-- );
-- CREATE INDEX idx_chat_participants_user_id ON chat_participants(user_id);

-- CREATE TABLE chat_messages (
--   message_id SERIAL PRIMARY KEY,
--   chat_id INT REFERENCES chats(chat_id),
--   sender_id INT REFERENCES users(user_id),
--   message TEXT,
--   sent_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
--   status message_status_enum DEFAULT 'sent'
-- );
-- CREATE INDEX idx_chat_messages_chat_sender ON chat_messages(chat_id, sender_id);
